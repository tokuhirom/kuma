TODO list
=========

generic
-------

    * super()
    * (as == b) ? 0 : ((as < b) ? -1 : 1);
    * optional type checking for arguments
    * args[0]
    * alias method
    * support operator overload?
    * ARGF
    * BUILD, BUILDARGS?
      * default argument?

Optimization
------------

    * rewrite scanner
        * in C or C++?
    * rewrite a VM in JS?
    * rewrite a VM in C++?
    * $1, $2, $3, ...
        * assign to variable if it's needed.
        * how can I detect "it's needed"?
        * It's needed when $1 is used in following-sibling and these children.
        * I can detect the number of parens in regex.
        * I can optimize it after release...
        * hmm................

One Liners
----------

    * -n option
    * -p option

scanner
-------

    * multiline comment support(should output to the js?)
    * better strings
    * better heredoc
    * support #{} style
    * //x
    * export keyword?

parser
------


translator
----------

    * block scope variable generation

runtime
-------

    * ARGF

milestone
---------

    * [done] fib
    * export feature
    * class support
    * block scope
    * no paste site
    * use node-js library
    * publish node.js library
    * self-hosting
    * [done] fizzbuzz
    * self support
    * run on browser
    * Test::More

END
===

done
----

    * parse preinc/postinc/predec/postdec
    * run pow
    * parse pow
    * parse true/false
    * run true/false
    * "rule('term', ["
    * "rule('additive-expression', ["
    * run additive-expression
    * "rule('shift-expression', ["
    * run "rule('shift-expression', ["
    * run "rule('cmp-expression', ["
    * parse "rule('cmp-expression', ["
    * "rule('dotdot-expression', ["
    * "rule('oror-expression', ["
    * "rule('andand-expression', ["
    * "rule('or-expression', ["
    * "rule('and-expression', ["
    * "rule('equality-expression', ["

