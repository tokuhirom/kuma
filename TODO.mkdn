TODO list
=========

scanner
-------

    * comment support
    * scanner supports strings
    * scanner supports heredoc or """
    * tune up
    * support #{} style
    * scan range object
    * scan regexp literal

parser
------

    * parse fib
    * parse if
    * postfix if
    * normal if(parser)
    * parse unary ops
    * parse fileteest ops
    * parse range object
    * parse regexp literal

    * "rule('program', ["
    * "rule('statement-list', ["
    * "rule('statement', ["
    * "rule('jump-statement', ["
    * "rule('else-clause', ["
    * "rule('expression', ["
    * "rule('block', ["
    * "rule('str-or-expression', ["
    * "rule('str-and-expression', ["
    * "rule('not-expression', ["
    * "rule('comma-expression', ["
    * "rule('assign-expression', ["
    * "rule('three-expression', ["
    * "rule('dotdot-expression', ["
    * "rule('oror-expression', ["
    * "rule('andand-expression', ["
    * "rule('or-expression', ["
    * "rule('and-expression', ["
    * "rule('equality-expression', ["
    * "rule('cmp-expression', ["
    * "rule('regexp-match', ["
    * "rule('unary', ["
    * "rule('method-call', ["
    * "rule('parameters', ["
    * "rule('parameter-list', ["
    * "rule('identifier', ["
    * "rule('class-name', ["
    * "rule('variable', ["
    * "rule('primary', ["

translator
----------

    * run if
    * normal if(translator)
    * run preinc/postinc/predec/postdec
    * run unary ops
    * run fileteest ops
    * run range object
    * run regexp literal

runtime
-------

milestone
---------

    * fib
    * class
    * no paste site
    * use node-js library
    * publish node.js library
    * self-hosting

END
===

done
----

    * parse preinc/postinc/predec/postdec
    * run pow
    * parse pow
    * parse true/false
    * run true/false
    * "rule('term', ["
    * "rule('additive-expression', ["
    * run additive-expression
    * "rule('shift-expression', ["
    * run "rule('shift-expression', ["

